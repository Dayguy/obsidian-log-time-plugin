import { __awaiter } from "tslib";
import { PluginSettingTab, Setting } from 'obsidian';
import { DEFAULT_SETTINGS } from './main';
export class LogTimeSettingTab extends PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    allValidMaskChars(userInputChars) {
        const validMaskChars = ['a', 'd', 'h', 'm', 's', 'y', 'z'];
        return userInputChars.every(char => validMaskChars.includes(char));
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        new Setting(containerEl)
            .setName('Format mask')
            .setDesc('Refer to list of valid masks found here: https://day.js.org/docs/en/display/format')
            .addText((text) => text
            .setPlaceholder("FUCK YOU")
            .setValue(this.plugin.settings.formatMask)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            const inputChars = value.toLowerCase().replace(/[^a-zA-Z]/g, '').split('');
            const isValid = this.allValidMaskChars(inputChars);
            if (isValid) {
                // Characters are valid for time/date mask 
                this.plugin.settings.formatMask = value;
            }
            else {
                // Invalid format so use the default
                this.plugin.settings.formatMask = DEFAULT_SETTINGS.formatMask;
            }
            yield this.plugin.saveSettings();
        })));
        new Setting(containerEl)
            .setName('Use UTC')
            .setDesc('If not using UTC, your local time will be used.')
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.isUTC).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.isUTC = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBTyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTFDLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxnQkFBZ0I7SUFHdEQsWUFBWSxHQUFRLEVBQUUsTUFBcUI7UUFDMUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN0QixDQUFDO0lBRU8saUJBQWlCLENBQUMsY0FBd0I7UUFDakQsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMzRCxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVFLE9BQU87UUFDVCxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzdCLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVwQixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7YUFDdEIsT0FBTyxDQUFDLGFBQWEsQ0FBQzthQUN0QixPQUFPLENBQUMsb0ZBQW9GLENBQUM7YUFDN0YsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO2FBQ3JCLGNBQWMsQ0FBQyxVQUFVLENBQUM7YUFDMUIsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQzthQUN6QyxRQUFRLENBQUMsQ0FBTyxLQUFLLEVBQUUsRUFBRTtZQUN6QixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ25ELElBQUksT0FBTyxFQUFFLENBQUM7Z0JBQ2IsMkNBQTJDO2dCQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3pDLENBQUM7aUJBQU0sQ0FBQztnQkFDUCxvQ0FBb0M7Z0JBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7WUFDL0QsQ0FBQztZQUNELE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNsQyxDQUFDLENBQUEsQ0FBQyxDQUNGLENBQUM7UUFFTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7YUFDbkIsT0FBTyxDQUFDLFNBQVMsQ0FBQzthQUNsQixPQUFPLENBQUMsaURBQWlELENBQUM7YUFDMUQsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBTyxLQUFLLEVBQUUsRUFBRTtnQkFDakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDbkMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3JDLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgTG9nVGltZVBsdWdpbiBmcm9tICcuL21haW4nO1xuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUyB9IGZyb20gJy4vbWFpbic7XG5cbmV4cG9ydCBjbGFzcyBMb2dUaW1lU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogTG9nVGltZVBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBMb2dUaW1lUGx1Z2luKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0cHJpdmF0ZSBhbGxWYWxpZE1hc2tDaGFycyh1c2VySW5wdXRDaGFyczogc3RyaW5nW10pOiBib29sZWFuIHtcblx0XHRjb25zdCB2YWxpZE1hc2tDaGFycyA9IFsnYScsICdkJywgJ2gnLCAnbScsICdzJywgJ3knLCAneiddO1xuXHRcdHJldHVybiB1c2VySW5wdXRDaGFycy5ldmVyeShjaGFyID0+IHZhbGlkTWFza0NoYXJzLmluY2x1ZGVzKGNoYXIpKTtcblx0fVx0ICAgIFxuICAgIFxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXHRcdFxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVx0XHRcblx0XHRcdC5zZXROYW1lKCdGb3JtYXQgbWFzaycpXG5cdFx0XHQuc2V0RGVzYygnUmVmZXIgdG8gbGlzdCBvZiB2YWxpZCBtYXNrcyBmb3VuZCBoZXJlOiBodHRwczovL2RheS5qcy5vcmcvZG9jcy9lbi9kaXNwbGF5L2Zvcm1hdCcpXG5cdFx0XHQuYWRkVGV4dCgodGV4dCkgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCJGVUNLIFlPVVwiKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9ybWF0TWFzaylcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGlucHV0Q2hhcnMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16QS1aXS9nLCcnKS5zcGxpdCgnJyk7XG5cdFx0XHRcdFx0Y29uc3QgaXNWYWxpZCA9IHRoaXMuYWxsVmFsaWRNYXNrQ2hhcnMoaW5wdXRDaGFycyk7XG5cdFx0XHRcdFx0aWYgKGlzVmFsaWQpIHtcblx0XHRcdFx0XHRcdC8vIENoYXJhY3RlcnMgYXJlIHZhbGlkIGZvciB0aW1lL2RhdGUgbWFzayBcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmZvcm1hdE1hc2sgPSB2YWx1ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gSW52YWxpZCBmb3JtYXQgc28gdXNlIHRoZSBkZWZhdWx0XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb3JtYXRNYXNrID0gREVGQVVMVF9TRVRUSU5HUy5mb3JtYXRNYXNrO1x0XHRcdFx0XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSxcblx0XHRcdCk7XG5cbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdVc2UgVVRDJylcbiAgICAgICAgICAgICAgICAuc2V0RGVzYygnSWYgbm90IHVzaW5nIFVUQywgeW91ciBsb2NhbCB0aW1lIHdpbGwgYmUgdXNlZC4nKVxuICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNVVEMpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNVVEMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblx0XHRcdH0pO1xuXHR9XG59Il19